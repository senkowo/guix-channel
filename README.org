#+title: yumi

A personal Guix channel

This channel contains mostly non-free software I personally use, which I could not find packaged anywhere else.

Programs provided by this channel:
- Renoise

* Installation

Add this channel to =~/.config/guix/channels.scm= like this:

#+begin_src scheme

(cons* (channel
        (name 'yumi)
        (url "https://github.com/senkowo/channel")
        ;; Enable signature verification:
        (introduction
         (make-channel-introduction
          "6892ebefe6f61b17e0966739f1bd23b7cc768bea"
          (openpgp-fingerprint
           "864D 7D40 2260 D1A5 E9B9  AC9B B703 FEDE 1CF1 30EA"))))
       %default-channels)

#+end_src

* Renoise

Renoise is a non-free, modern, tracker-based DAW with demo and paid versions.

Homepage: https://www.renoise.com 

Package definition: [[file:yumi/packages/renoise.scm][yumi/packages/renoise.scm]]

The =renoise= package, by default, pulls a copy of the demo-version installer from the Renoise website. 

** Installing the demo version

To install the demo version, you simply install the package as =renoise=.

** Install from a file

To install Renoise from an installer saved on your system (necessary for the paid/full version), you must apply a transformation to the package. This can be done in several ways:

*** Using command-line arguments

The command:

~$ guix install --with-source=renoise@<version>=<path-to-installer> renoise@<version>~

So for example:

~$ guix install --with-source=renoise@3.4.3=/home/yui/Downloads/rns_343_linux_x86_64.tar.gz renoise@3.4.3~

This will install Renoise verison 3.4.3 in the default profile using an installer found at the path specified. The installer must be a =tar.gz= file.

Some explanations:
- The =--with-source=renoise@<version>== transformation essentially adds the file found at =<path>= to the guix store, similar to what the command =guix download= does, but to be specifically used for building the specified package.
- You should specify the exact Renoise version, because otherwise, if I add a new Renoise version to the channel, you will update to a newer Renoise version, but using an older Renoise installer, which might be problematic.
  - (Anyone know how this can be mitigated in the package definition? Maybe get the actual Renoise version from install.sh and compare it to the version in the package definition?)

*** Using Scheme

The following code applies the same transformation to the =renoise= package and provides it with variable =renoise-custom=. 

#+begin_src scheme

  (use-modules (gnu packages)
               (guix transformations))

  (define transform-install-path
    (options->transformation
     '((with-source
        . "renoise@3.4.3=/home/yui/Downloads/rns_343_linux_x86_64.tar.gz"))))

  (define-public renoise-custom
    (transform-install-path (specification->package "renoise@3.4.3")))

#+end_src

If you want to install this to the default profile, you could simply append ~renoise-custom~ to the end of the file, then run ~$ guix install -f <path-to-file>~.

Personally, I like to add it to a pre-existing manifest in another file, like this:

#+begin_src scheme

  (define-public renoise-manifest
    (cons
     ;; renoise pacakge
     renoise-custom
     ;; misc
     (specifications->packages
      '("jack"
        "jack2"
        "qjackctl"
        "alsa-utils"
        "programming-socks"))))

#+end_src

**** Using a package variant

Instead of returning simply the original package but with a transformation applied to it, you can instead create an entirely new package variant. I've had mixed results with doing this, and I would personally stick to the previous methods described, but this is always an option. 

An example:

#+begin_src scheme

  (define transform-install-path
    (options->transformation
     '((with-source
        . "renoise@3.4.3=/home/yui/Downloads/rns_343_linux_x86_64.tar.gz"))))

  (define-public renoise-full-3.4.3
    (package
      (inherit
       (transform-install-path 
        (specification->package "renoise@3.4.3"))) ; make sure to specify version
      (name "renoise-full")))

#+end_src

This will provide a package called =renoise-full= that has the transformations applied to it already. It's important to specify =renoise@<version>= after =specification->package=, or else when I add a new Renoise version that can be installed, it will inherit from that package instead, but using the older sources you specified, which can cause issues.

** Prevent guix gc from deleting sources in store

If you installed Renoise from a local file, after running ~guix gc~, it may delete its setup files from the Guix store, requiring having to refetch the installer when rebuilding the package. When this happens, the package transformation will need to point to a valid path to the installer.

I personally prefer to delete the Renoise installer after installing it onto my system, just to wipe out any possibility of accidentally uploading my paid copy of Renoise somewhere. But if Guix deletes the Renoise setup files from the store, it will expect the installer to be where I specified it in the transformation. So to deal with this, you can make Guix never delete the Renoise sources.

To prevent Guix from deleting the Renoise sources from the store, run the following:

~$ guix build --with-source=renoise@<ver>=<path> --root=<symlink-path> renoise@<ver>~

This will create a symlink at =<symlink-path>=, which points to the Renoise sources store. For as long as this symlink exists, =guix gc= will not remove the sources from the store. You should now be able to delete the Renoise installer in your home directory, without the fear of =guix gc= deleting the sources and having to re-fetch the installer.

*** If you created a package variant

If you created a Renoise package variant that applies the transformation, the command to run is a little bit different:

~$ guix build --with-source=renoise-full@<ver>=<path> --root=<symlink-path> renoise-full@<ver>~
(this is assuming the package name is =renoise-full=)

The package name specified after =--with-source== and at the very end must match your package variant's name.

* Contributing

I'm not extremely savvy with Guix or scheme, so let me know if there are any ways in which I can improve this channel! :3

For example:
- making available certain Renoise versions
- advice on writing package definitions
- channel not working

* References
- https://gitlab.com/guix-gaming-channels/games: on avoiding guix gc from deleting sources, and all around a great resource on non-free guix packages.

* Notes to self
- Does not specifying package version to transformation break things when the renoise package definition is updated?
