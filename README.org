#+title: yumi

A personal Guix channel

This channel contains mostly non-free software I personally use that were not packaged anywhere else.

Programs provided by this channel:
- Renoise

* Installation

Add this channel to ~~/.config/guix/channels.scm~ like this:

#+begin_src scheme

(cons* (channel
        (name 'yumi)
        (url "https://github.com/senkowo/channel")
        ;; Enable signature verification:
        (introduction
         (make-channel-introduction
          "c23d64f1b8cc086659f8781b27ab6c7314c5cca5"
          (openpgp-fingerprint
           "50F3 3E2E 5B0C 3D90 0424  ABE8 9BDC F497 A4BB CC7F"))))
       %default-channels)

#+end_src

* Renoise

Renoise is a non-free, modern, tracker-based DAW with demo and paid versions.

Homepage: https://www.renoise.com

The =renoise= package, by default, pulls a copy of the demo-version installer from the Renoise website. 

** Install from a file

To install Renoise from an installer saved on your system (necessary for the paid/full version), you must apply a transformation to the package. This can be done in several ways:

*** Using command-line arguments

~$ guix install --with-source=renoise=<path> renoise~
(note the =renoise= after =--with-source==)

This will install Renoise in the default profile using an installer found at =<path>= (replace this). The installer must be a =tar.gz= file.

For more info, the =--with-source=renoise== transformation essentially adds the file at =<path>= to the guix store, similar to =guix download=, but to be used for building the specified package.

*** Using Scheme

The following code applies the same transformation to the =renoise= package and provides it as =renoise-custom=. 

#+begin_src scheme

  (use-modules (gnu packages)
               (guix transformations))

  (define transform-install-path
    (options->transformation
     '((with-source
        . "renoise=/home/yui/Downloads/rns_343_linux_x86_64.tar.gz"))))

  (define-public renoise-custom
    (transform-install-path (specification->package "renoise")))

#+end_src

If you want to install this to the default profile, you could add ~renoise-custom~ to the end of the file, then run ~$ guix install -f <path-to-file>~.

Personally, I like to add it to a pre-existing manifest, like this:

#+begin_src scheme

  (define-public renoise-manifest
    (cons*
     renoise-custom
     (specifications->packages
      '(;; vv jack vv
        "jack" "jack2" "qjackctl"
        "dbus"
        "alsa-utils"
        "programming-socks"))))

#+end_src

**** Using a package variant

You have the option to create a package variant that performs the transformation and put it in your personal guix channel, but I wouldn't recommend it for several reasons... It makes debugging harder due to having a name similar to the original package, and relevant commands, like the ones in the following sections, are slightly different. But anyway, here's how you'd create a package variant that performs the transformation.

#+begin_src scheme

  (define transform-install-path
    (options->transformation
     '((with-source
        . "renoise=/home/yui/Downloads/rns_343_linux_x86_64.tar.gz"))))

  (define-public renoise-full
    (package
      (inherit
       (transform-install-path 
        (specification->package "renoise")))
      (name "renoise-full")))

#+end_src

** Prevent guix gc from deleting sources in store

If you installed Renoise from a local file, after running ~guix gc~, it may delete the sources from the guix store, requiring having to fetch the installer when rebuilding. When this happens, the package transformation will need to specify a valid path to the installer. But I personally prefer to delete the Renoise installer after installing it, just to wipe out any possibility of accidentally uploading my copy to somewhere. 

To prevent Guix from deleting the Renoise sources from the store, run the following:

~$ guix build --with-source=renoise=<path> --root=<symlink-path> renoise~

This will create a symlink at =<symlink-path>=, which points to the renoise package profile in the store. For as long as this symlink exists, =guix gc= will not remove the sources from the store. You should now be able to delete the Renoise installer in your home directory, without the fear of =guix gc= deleting the sources and having to re-fetch the installer.

*** If you created a package variant

If you created a Renoise package variant that applies the transformation, the command to run is a little bit different:

~$ guix build --with-source=renoise-full=<path> --root=<symlink-path> renoise-full~
(this is assuming the package name is =renoise-full=)

The package name specified after =--with-source== and at the very end must match your package variant's name.

* Contributing

I'm not extremely savvy with Guix or scheme, so let me know if there are any ways in which I can improve this channel! :3

* References
- https://gitlab.com/guix-gaming-channels/games: on avoiding guix gc from deleting installer.

* Notes to self
- Does not specifying package version to transformation break things when the renoise package definition is updated?
- Create multiple package defs for different versions?
- Run guix git authenticate before any commits/pushes in master
- key branch
